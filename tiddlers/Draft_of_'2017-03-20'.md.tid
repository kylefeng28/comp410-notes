created: 20170320131159982
creator: kylefeng
draft.of: 2017-03-20
draft.title: 2017-03-20
modified: 20170320141831435
modifier: kylefeng
tags: notes
title: Draft of '2017-03-20'
type: text/x-markdown

- Dynamic Dictionary (DD)
  - `insert(k, d)`
  - `find(k) -> d`
  - `remove(k)`

- DD as Binary Search Tree
  - Only for Comparables
  - All implemented recursively
    - Return { leaf, node w/ a single child, w/ 2 children }
  - Runtime is $O(height)$
    - Average: $height = log n$
    - Worst case is $height = n$

- AVL tree
  - Maintain the hieight of each node
  - Define a balance condition for each node; the height of its subtrees differ by at most 1
  - If an operation violates the balance condition, rotate
 
 
`insert` and `remove` are implemented as usual, but before the return there 

```java
void insert(K k, D, d) {
    ...
    
    rebalance(t);
    t.height = 1 + Math.max(height(t.left), height(t.right));
    return;
}
```
 
- 4 rotation cases:
  - 1. LL: Inserted into left subtree of the left child of $\alpha$
  - 2. RL: Inserted into right subtree of the left child of $\alpha$
  - 3. LR: Inserted into left subtree of the right child of $\alpha$
  - 4. RR: Inserted into right subtree of the right child of $\alpha$

TODO: insert Figure 4.31

- A single rotation fixes cases 1 and 4

- Rebalancing is implemented with pointer manipulation
- If no rebalancing is required, `rebalance()` does nothing

TODO: insert Figure 4.35

RL rotations?? TODO

$$N(0) = 1$$
$$N(1) = 2$$
$$N(2) = 4$$
$$N(3) = 7$$

Recurrence:
$$N(h) = N(h1) + N(h-2) + 1$$

Similar to Fibonacci sequence, but grows even faster

$$N(h) > (\frac{3}{2})^2 - 1$$

Practice: generate random numbers and draw an AVL tree